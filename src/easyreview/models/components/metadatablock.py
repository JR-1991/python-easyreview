"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .compound import Compound
from .field import Field
from dataclasses_json import Undefined, dataclass_json
from easyreview import utils
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Metadatablock:
    compounds: List[Compound] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compounds') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    primitives: List[Field] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primitives') }})
    review: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review') }})
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    

